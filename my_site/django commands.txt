# django command prompt
# Run commands from anaconda shell (to activate environment)

# Activate environment
conda activate django

# Create project
django-admin startproject <django_site>

# Create app
python manage.py startapp <app_name>

# Development server
python manage.py runserver

# Using the django shell for testing
python manage.py shell

# Creating a user or superuser
python manage.py createsuperuser

#####################
# Activating Models #
#####################
# First, add to the list of INSTALLED_APPS in settings.py
# Create necessary database tables from settings.py
python manage.py migrate
# Create necessary database tables from an app. By running this I let django
# know I've made changes to models, and I'd like changes to be stored as a migration
python manage.py makemigrations <app_name>
# remember the three-step guide to making model changes:
Change your models (in models.py)
python manage.py makemigrations <app_name> # to create migrations for those changes
python manage.py migrate # to apply those changes to the database.

##################
# Testing Models #
##################
python manage.py shell
from <app_name>.models import <model_1>, <model_2>
<model_1>.objects.all()
<instance> = <model_1>(<param1>,<param2>)
<instance>.save()
<instance>.id
<instance>.<attribute>


##################
# Standard files #
##################
root directory : my_site/ (container for my project) and my_site/ (inner package)
manage.py : command line utility for interacting w/ django
my_site/settings.py : settings for project
my_site/urls.py : "table of contents" for the website.. this will reference
    urls in the views.py module, which tells django what httpresponse to send
    based on the url pattern it receives
my_site/wsgi.py : entry point for WSGI-compatable web servers to serve the 
    project (worry about this later)

##################
# Views and urls #
##################
# You need to import views.py to urls.py b/c you will reference functions
# in views.py
urls.py : Contains url paths

# @param <regex_route> string that contains a URL pattern
# @param views.<function_name> should match the function returning a httpResponse
# In views.py. 
# @param name : lets your name your URL, and refer to it unambiguously from
    elsewhere in django : AKA if you want to use it in a <href> tag
    you can do {% url 'name_string' %}
urlpatterns =[
    path('<regex_route>', views.<function_name>, name=<name??>)
]

# Using angle brackets while defining a URLconf like <int:question_id>/polls/
# captures part of the URL and sends it to the views.<view_method> with
# Keyword arguments 'question_id'
path('<int:question_id'/deatil/, views.deatil, name='detail')

# How to namespace urls.py to use url tags in html templates
# Scenario : You reference a URLconf like {% url 'url_string_name' %} in a template
# urls.py has an entry path('url/conf', views.method, name='url_string_name')
# If I have multiple apps with a path('url_string_name') Things will go wrong
# In urls.py
app_name = '<app_name_string>'
# In .html
{% url '<app_name_string>:<url_string_name>' %}

##################
## Admin Files ###
##################
# To have database models editable from the admin, I have to add
# Models to the app_name/admin.py files
admin.site.register(Question)

##################
# Generic Views ##
##################
1. Create a URLconf
2. Introduce views based on django generic views (ListView, DetailView)
## DetailView & ListView ##
queryset - (optional) all the objects to be passed as context. The default is <model>.objects.all()
    and all objects will be passed to the template being rendered
model - (mandatory) what model is the view representing? If you do not define this,
    then queryset must be defined
context_object_name
template_name : (optional) template name for generic view to render. If this is not defined,
    then it will look for a template that matches the model name. For DetailView, it 
    would look for <model_name>_detail.html.
get_context_data() : (optional) add context data to be passed to the template.
get_queryset() : returns the value of the class queryset attribute. Add more logic
    by overriding this class method

##################
# Database Query #
##################
# https://docs.djangoproject.com/en/3.0/topics/db/queries/
# Field lookups (exact, contains, ), this is called a Model Manager object
Entry.objects.filter(<field>__<lookuptype>=value)
# primary Key
entry.objects.get(pk=14)
# Order
entry.objects.all().order_by('<+ or -><field_name>)

##################
## Test Client ###
##################
# Use this to test code at the view level. Use it in shell
# Useful for looking at response.context
from django.text.utils import setup_test_environment
setup_test_environment()
from django.test import Client
client = Client()
response = client.get('URL/conf')
response.status_code
from django import reverse
response = client.get(reverse('<app_name>:<view_name>'))
response.status_code
response.content # HTML content
response.context # Dictionary, items passed to template

##################
### Unit Test ####
##################
# Run all the tests in the <app_name>.tests module
$ python manage.py test <app_name>.tests

# Run all the tests found within the <app_name> package
$ manage.py test <app_name>

# Run just one test case
$ python manage.py test <app_name>.tests.<test_case_class>

# Run just one test method
$ python manage.py test <app_name>.tests.<test_case_class>.<test_method>

