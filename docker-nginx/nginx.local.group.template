# nginx Configuration File
# https://wiki.nginx.org/Configuration

upstream upstream_server {
    # Do not include http in hostname. The protocol used to join
    # These servers is specified in proxy_pass directive
    server ${WEBAPP_HOSTNAME_LOCAL}:${WEBAPP_INTERNAL_PORT};
}

server {
    # Forward http requests on port 80 to port 443 for SSL
    listen ${PROXY_INTERNAL_PORT_HTTP};

    # When there are multiple servers listening on the same port Nginx
    # Will use the 'Host' value in the request header to know which server
    # Will handle that request
    server_name ${REVERSE_PROXY_HOSTNAME} www.${REVERSE_PROXY_HOSTNAME};
    return 301 https://${REVERSE_PROXY_HOSTNAME}:${PROXY_EXTERNAL_PORT_HTTPS}$request_uri;
}

server {
    # Listen on ipv4 and ipv6 addresses on the server
    listen [::]:${PROXY_INTERNAL_PORT_HTTPS} ssl;
    listen ${PROXY_INTERNAL_PORT_HTTPS} ssl;
    server_name ${REVERSE_PROXY_HOSTNAME};

    # Protect against the BEAST attack by not using SSLv3 at all. If you need to support older browsers (IE6) you may need to add
    # SSLv3 to the list of protocols below.
    ssl_protocols TLSv1.2;

    # Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
    ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_prefer_server_ciphers  on;

    # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:1m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  24h;

    # Use a higher keepalive timeout to reduce the need for repeated handshakes
    keepalive_timeout 300; # up from 75 secs default

    # remember the certificate for a year and automatically connect to HTTPS
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';

    # ssl_certificate      /etc/nginx/ssl.crt;
    # ssl_certificate_key  /etc/nginx/ssl.key;
    ssl_certificate /etc/letsencrypt/live/johnvorsten.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/johnvorsten.me/privkey.pem; # managed by Certbot

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
        proxy_pass http://upstream_server;
        proxy_set_header Connection "";

        # See ip address of client (not proxy)
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Change the host request header to the original request
        proxy_set_header Host $host;

        # Identify original host requested by the client in the Host HTTP request header
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_redirect off;

        error_log  /var/log/nginx/proxy_pass_log.log;
    }

    location /static-serve/ {
        autoindex on;
        root /home/app/web;
    }

    location /media/ {
        autoindex on;
        root /home/app/web;
    }
    
} # End server